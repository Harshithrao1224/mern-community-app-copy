{"ast":null,"code":"import AggregateError from 'aggregate-error'; // Use built-in when targeting Node.js 16\n\nexport class IpNotFoundError extends Error {\n  constructor(options) {\n    super('Could not get the public IP address', options);\n    this.name = 'IpNotFoundError';\n  }\n}\nexport function createPublicIp(publicIpv4, publicIpv6) {\n  return function publicIp(options) {\n    // eslint-disable-line func-names\n    const ipv4Promise = publicIpv4(options);\n    const ipv6Promise = publicIpv6(options);\n    const promise = (async () => {\n      try {\n        const ipv6 = await ipv6Promise;\n        ipv4Promise.cancel();\n        return ipv6;\n      } catch (ipv6Error) {\n        if (!(ipv6Error instanceof IpNotFoundError)) {\n          throw ipv6Error;\n        }\n        try {\n          return await ipv4Promise;\n        } catch (ipv4Error) {\n          throw new AggregateError([ipv4Error, ipv6Error]);\n        }\n      }\n    })();\n    promise.cancel = () => {\n      ipv4Promise.cancel();\n      ipv6Promise.cancel();\n    };\n    return promise;\n  };\n}","map":{"version":3,"names":["AggregateError","IpNotFoundError","Error","constructor","options","name","createPublicIp","publicIpv4","publicIpv6","publicIp","ipv4Promise","ipv6Promise","promise","ipv6","cancel","ipv6Error","ipv4Error"],"sources":["C:/Users/victo/Desktop/mern-community-app-copy/client/node_modules/public-ip/core.js"],"sourcesContent":["import AggregateError from 'aggregate-error'; // Use built-in when targeting Node.js 16\n\nexport class IpNotFoundError extends Error {\n\tconstructor(options) {\n\t\tsuper('Could not get the public IP address', options);\n\t\tthis.name = 'IpNotFoundError';\n\t}\n}\n\nexport function createPublicIp(publicIpv4, publicIpv6) {\n\treturn function publicIp(options) { // eslint-disable-line func-names\n\t\tconst ipv4Promise = publicIpv4(options);\n\t\tconst ipv6Promise = publicIpv6(options);\n\n\t\tconst promise = (async () => {\n\t\t\ttry {\n\t\t\t\tconst ipv6 = await ipv6Promise;\n\t\t\t\tipv4Promise.cancel();\n\t\t\t\treturn ipv6;\n\t\t\t} catch (ipv6Error) {\n\t\t\t\tif (!(ipv6Error instanceof IpNotFoundError)) {\n\t\t\t\t\tthrow ipv6Error;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\treturn await ipv4Promise;\n\t\t\t\t} catch (ipv4Error) {\n\t\t\t\t\tthrow new AggregateError([ipv4Error, ipv6Error]);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\n\t\tpromise.cancel = () => {\n\t\t\tipv4Promise.cancel();\n\t\t\tipv6Promise.cancel();\n\t\t};\n\n\t\treturn promise;\n\t};\n}\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,iBAAiB,CAAC,CAAC;;AAE9C,OAAO,MAAMC,eAAe,SAASC,KAAK,CAAC;EAC1CC,WAAWA,CAACC,OAAO,EAAE;IACpB,KAAK,CAAC,qCAAqC,EAAEA,OAAO,CAAC;IACrD,IAAI,CAACC,IAAI,GAAG,iBAAiB;EAC9B;AACD;AAEA,OAAO,SAASC,cAAcA,CAACC,UAAU,EAAEC,UAAU,EAAE;EACtD,OAAO,SAASC,QAAQA,CAACL,OAAO,EAAE;IAAE;IACnC,MAAMM,WAAW,GAAGH,UAAU,CAACH,OAAO,CAAC;IACvC,MAAMO,WAAW,GAAGH,UAAU,CAACJ,OAAO,CAAC;IAEvC,MAAMQ,OAAO,GAAG,CAAC,YAAY;MAC5B,IAAI;QACH,MAAMC,IAAI,GAAG,MAAMF,WAAW;QAC9BD,WAAW,CAACI,MAAM,CAAC,CAAC;QACpB,OAAOD,IAAI;MACZ,CAAC,CAAC,OAAOE,SAAS,EAAE;QACnB,IAAI,EAAEA,SAAS,YAAYd,eAAe,CAAC,EAAE;UAC5C,MAAMc,SAAS;QAChB;QAEA,IAAI;UACH,OAAO,MAAML,WAAW;QACzB,CAAC,CAAC,OAAOM,SAAS,EAAE;UACnB,MAAM,IAAIhB,cAAc,CAAC,CAACgB,SAAS,EAAED,SAAS,CAAC,CAAC;QACjD;MACD;IACD,CAAC,EAAE,CAAC;IAEJH,OAAO,CAACE,MAAM,GAAG,MAAM;MACtBJ,WAAW,CAACI,MAAM,CAAC,CAAC;MACpBH,WAAW,CAACG,MAAM,CAAC,CAAC;IACrB,CAAC;IAED,OAAOF,OAAO;EACf,CAAC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}